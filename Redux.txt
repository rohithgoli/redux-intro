Redux:
+ A predictable state container for Javascript applications.
+ Redux, a library, can be used with React, Angular, Vue or even vanilla Javascript
+ State of an app is the state represented by all the individual components of that app
    (This includes the data & the UI logic)
+ Redux will store and manage the application state

+ Q: Why to use redux in react app ? As we know Components in React have their own state, so what
    is the need of another tool to help manage the state ?
    Alternatives are:
        -> React context - Prevents prop drilling
        -> useContext + useReducer 
        Redux is available since 2015
+ React-Redux is the official Redux UI binding library for React


# 3-Core concepts:
    + Store - Holds the state of your application - Shop
    + Action - Describes what happened(describes the changes in the state of appln) - Intention to BUY_CAKE
    + Reducer - Ties the store and actions together(which actually carries out state transition
                depending on the action) - Shopkeeper

# 3-Principles of Redux pattern
+ The state of your whole application is stored in an object tree within a single store
    i.e Maintain application state in a single object which would be managed by Redux store
+ The only way to change the state is to emit an action, an object describing what happened
    i.e To update the state of your app, you need to let Redux know about that with an action
        Not allowed to directly update the state object
    eg: {
            type: 'BUY_CAKE'
        }
+ To specify how the state tree is transformed by actions, you write pure reducers
    Reducer - (prevState, action) => newState
    eg: 
        const reducer = (state, action) => {
            switch(action.type) {
                case BUY_CAKE:
                    return {
                        numOfCakes: state.numOfCakes - 1 
                    }
            }
        }


# Actions
+ The only way your appln can interact with the store
+ Carry some info. from your app to the redux store
+ plain js objects
+ Have a type property that indicates the type of action being performed
+ The type proerty is typically defined as string constants
+ Action Creator are function that returns the action


# Reducers
+ Specify how the app's state changes in response to actions sent to store
+ are functions that accept state and action as agruments, and returns the next state of appln


Redux Store:
+ One store for the entire application
+ Responsibilities are:
    > Holds application state
    > Allows access to state via getState()
    > Allows state to be updated via dispatch(action)
    > Registers listeners via subscribe(listener)
    > Handles unregistering of listeners via the function returned by subscriber(listener)


# Redux pattern
    1) Create a store
    2) Declare InitialState and Reducer
    3) Define action types and action creators
    4) subscribe to store
    5) Dispatch actions to update the store
    6) Unsubscribe to updates from store 


# Multiple Reducers & combineReducers

+ It is good to maintain multiple reducers for handling different scenarios(cakes, ice-creams, etc..)
+ Also it is good to maintain separate state
+ Redux provide combineReducers to combine multiple reducers

    Thus 
        + Each of the reducers is managing its own part of Global state
            The state parameter is different for every reducer & corresponds to the part of the state it manages

        + When appln grows in size, keep the reducers in separate files & keep them 
            completely independant in managing different areas

# Middleware

+ A suggested way to extend Redux with custom functionality
+ Provides a third-party extension point between dispatching an action & at the moment it reaches the reducer
+ Use middleware for logging, crash reporting, performing asynchronous tasks etc..
+ redux-logger is package for middleware


# async-actions

+ Fetch a list of users from API endpoint and store it in redux store
    State ?
    Actions ?
    Reducer ?
+ For Any Data fetching typically, state contains 3 properties
    state = {
        loading: bool, // display loading spinner in component
        data: [], // List of users
        error: '' // display error to user
    }

    Actions
    FETCH_USERS_REQUEST --> Fetch list of users
    FETCH_USERS_SUCCESS --> Fetched successfully
    FETCH_USERS_FAILURE --> Error fetching the data

    Reducers
    case: FETCH_USERS_REQUEST
        loading: true
    case: FETCH_USERS_SUCCESS
        loading: false
        data: users(from API)
    case: FETCH_USERS_FAILURE
        loading: false
        error: error(from API)


# async action creators
+ action creation with Network request  i.e How to Make an API call when working with Redux
+ axios --> Requests to an API endpoint
  redux-thunk --> Define async action creators
                  Middleware
+ using thunkMiddleware, gives ability for action creator to return function instead of object
    thereby enabling to perform sideffects such as asynchronous tasks
    & functions can also perform regular actions, which can be handled by reducer
    